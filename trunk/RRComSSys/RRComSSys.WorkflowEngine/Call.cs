//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Design Document
//  @ File Name : Call.cs
//  @ Date : 4/19/2009
//  @ Author : 
//
//
using System;
using RRComSSys.TransformationEngine;
using RRComSSys.SynthesisEngine;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Threading;

namespace RRComSSys.WorkflowEngine
{
    
    public class Call : WFElement
    {
        private AutoResetEvent resetEvent = new AutoResetEvent(false);
        private Exception _exception = null;
        private TransformationEngine.Call myActivity = null;
        private WorkflowEngine.Connection myConnection = null;

        /// <summary>
        /// Gets or sets the call connection.
        /// </summary>
        /// <value>The call connection.</value>
        public Connection CallConnection
        {
            get { return myConnection; }
            set { myConnection = value; }
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Call"/> class.
        /// </summary>
        /// <param name="aCall">A call.</param>
        /// <param name="wfInstance">The wf instance.</param>
        public Call( TransformationEngine.Call aCall, Workflow wfInstance )
        {
            myActivity = aCall;
            BuildConnection(wfInstance);
        }

        /// <summary>
        /// Builds the connection.
        /// </summary>
        /// <param name="instance">The instance.</param>
        private void BuildConnection(Workflow instance)
        {
            try
            {
                TransformationEngine.Connection aConnection = instance.Connection.Find(x => (x.ConnectionID == myActivity.CallToConnection));
                CallConnection = new Connection(aConnection, instance);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region Implementation of IActivity

        /// <summary>
        /// Processes the activity.
        /// </summary>
        /// <returns></returns>
        public override bool processActivity()
        {
            List<string> users = new List<string>();
            CommandType type = CommandType.Chat;
            for (int i = 1; i < CallConnection.RemotelyConnectedDevices(); i++)
            {
                Person p = CallConnection.DeviceAt(i).DeviceAttachesToPerson();
                users.Add(p.PersonID);
            }

            foreach (Capability cap in CallConnection.DeviceAt(0).DeviceModel().deviceCapability)
            {
                if (cap == Capability.LiveAudio)
                    type = CommandType.VoiceCall;
                else if (cap == Capability.LiveVideo)
                    type = CommandType.VideoCall;                
            }
            
            System.Threading.Thread t = new System.Threading.Thread(new System.Threading.ParameterizedThreadStart(ExecuteCall));
            t.SetApartmentState(System.Threading.ApartmentState.STA);
            
            t.Start(new ExecutionArgs(users.ToArray(), type, ""));
            resetEvent.WaitOne();

            return true;
        }

        private void ExecuteCall(object execArgs)
        {
            
            ExecutionArgs args = (ExecutionArgs)execArgs;
            SEClient sec = new SEClient(args.Type);
            sec.MyCommand.Users = args.Users;
            try
            {
                sec.MyCommand.Execute();
            }
            catch (Exception exc)
            {
                this.Outcome = false;
                MessageBox.Show(exc.Message);
            }
            resetEvent.Set();
        }

        /// <summary>
        /// Gets the activity ID.
        /// </summary>
        /// <returns></returns>
        public override string getActivityID()
        {
            return myActivity.activityID;
        }

        /// <summary>
        /// Nexts the activity ID.
        /// </summary>
        /// <returns></returns>
        public override string nextActivityID()
        {
            if (string.IsNullOrEmpty(myActivity.CallToDecision) && (!string.IsNullOrEmpty(myActivity.CallToBoundary)))
                return myActivity.CallToBoundary;
            if (string.IsNullOrEmpty(myActivity.CallToBoundary) && (!string.IsNullOrEmpty(myActivity.CallToDecision)))
                return myActivity.CallToDecision;
            return string.Empty;
        }

        public override Type TypeOfActivity()
        {
            return typeof (Call);
        }

        #endregion

        #region Execution Args

        public class ExecutionArgs
        {
            public string[] Users { get; private set; }
            public CommandType Type { get; private set; }
            public string FilePath { get; private set; }

            public ExecutionArgs (string [] users, CommandType type, string filePath)
	        {
                Users = users;
                type = Type;
                FilePath = filePath;
	        }
        }
        #endregion
    }

} 


