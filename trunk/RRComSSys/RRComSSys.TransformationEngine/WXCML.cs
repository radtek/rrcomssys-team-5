// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.1.3314.24787
//    <NameSpace>RRComSSys.TransformationEngine.ObjectModel</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><DisableDebug>True</DisableDebug><CustomUsings></CustomUsings>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace RRComSSys.TransformationEngine.ObjectModel
{
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Workflow : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private WorkflowActivities activitiesField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Boundary boundaryField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Call callField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Decision decisionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Connection connectionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Form formField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Device deviceField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Person personField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private IsAttached isAttachedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Medium mediumField;

        public Workflow()
        {
            if ((this.mediumField == null))
            {
                this.mediumField = new Medium();
            }
            if ((this.isAttachedField == null))
            {
                this.isAttachedField = new IsAttached();
            }
            if ((this.personField == null))
            {
                this.personField = new Person();
            }
            if ((this.deviceField == null))
            {
                this.deviceField = new Device();
            }
            if ((this.formField == null))
            {
                this.formField = new Form();
            }
            if ((this.connectionField == null))
            {
                this.connectionField = new Connection();
            }
            if ((this.decisionField == null))
            {
                this.decisionField = new Decision();
            }
            if ((this.callField == null))
            {
                this.callField = new Call();
            }
            if ((this.boundaryField == null))
            {
                this.boundaryField = new Boundary();
            }
            if ((this.activitiesField == null))
            {
                this.activitiesField = new WorkflowActivities();
            }
        }

        /// <remarks/>
        public WorkflowActivities Activities
        {
            get
            {
                return this.activitiesField;
            }
            set
            {
                if ((this.activitiesField != null))
                {
                    if ((activitiesField.Equals(value) != true))
                    {
                        this.activitiesField = value;
                        this.OnPropertyChanged("Activities");
                    }
                }
                else
                {
                    this.activitiesField = value;
                    this.OnPropertyChanged("Activities");
                }
            }
        }

        /// <remarks/>
        public Boundary Boundary
        {
            get
            {
                return this.boundaryField;
            }
            set
            {
                if ((this.boundaryField != null))
                {
                    if ((boundaryField.Equals(value) != true))
                    {
                        this.boundaryField = value;
                        this.OnPropertyChanged("Boundary");
                    }
                }
                else
                {
                    this.boundaryField = value;
                    this.OnPropertyChanged("Boundary");
                }
            }
        }

        /// <remarks/>
        public Call Call
        {
            get
            {
                return this.callField;
            }
            set
            {
                if ((this.callField != null))
                {
                    if ((callField.Equals(value) != true))
                    {
                        this.callField = value;
                        this.OnPropertyChanged("Call");
                    }
                }
                else
                {
                    this.callField = value;
                    this.OnPropertyChanged("Call");
                }
            }
        }

        /// <remarks/>
        public Decision Decision
        {
            get
            {
                return this.decisionField;
            }
            set
            {
                if ((this.decisionField != null))
                {
                    if ((decisionField.Equals(value) != true))
                    {
                        this.decisionField = value;
                        this.OnPropertyChanged("Decision");
                    }
                }
                else
                {
                    this.decisionField = value;
                    this.OnPropertyChanged("Decision");
                }
            }
        }

        /// <remarks/>
        public Connection Connection
        {
            get
            {
                return this.connectionField;
            }
            set
            {
                if ((this.connectionField != null))
                {
                    if ((connectionField.Equals(value) != true))
                    {
                        this.connectionField = value;
                        this.OnPropertyChanged("Connection");
                    }
                }
                else
                {
                    this.connectionField = value;
                    this.OnPropertyChanged("Connection");
                }
            }
        }

        /// <remarks/>
        public Form Form
        {
            get
            {
                return this.formField;
            }
            set
            {
                if ((this.formField != null))
                {
                    if ((formField.Equals(value) != true))
                    {
                        this.formField = value;
                        this.OnPropertyChanged("Form");
                    }
                }
                else
                {
                    this.formField = value;
                    this.OnPropertyChanged("Form");
                }
            }
        }

        /// <remarks/>
        public Device Device
        {
            get
            {
                return this.deviceField;
            }
            set
            {
                if ((this.deviceField != null))
                {
                    if ((deviceField.Equals(value) != true))
                    {
                        this.deviceField = value;
                        this.OnPropertyChanged("Device");
                    }
                }
                else
                {
                    this.deviceField = value;
                    this.OnPropertyChanged("Device");
                }
            }
        }

        /// <remarks/>
        public Person Person
        {
            get
            {
                return this.personField;
            }
            set
            {
                if ((this.personField != null))
                {
                    if ((personField.Equals(value) != true))
                    {
                        this.personField = value;
                        this.OnPropertyChanged("Person");
                    }
                }
                else
                {
                    this.personField = value;
                    this.OnPropertyChanged("Person");
                }
            }
        }

        /// <remarks/>
        public IsAttached IsAttached
        {
            get
            {
                return this.isAttachedField;
            }
            set
            {
                if ((this.isAttachedField != null))
                {
                    if ((isAttachedField.Equals(value) != true))
                    {
                        this.isAttachedField = value;
                        this.OnPropertyChanged("IsAttached");
                    }
                }
                else
                {
                    this.isAttachedField = value;
                    this.OnPropertyChanged("IsAttached");
                }
            }
        }

        /// <remarks/>
        public Medium Medium
        {
            get
            {
                return this.mediumField;
            }
            set
            {
                if ((this.mediumField != null))
                {
                    if ((mediumField.Equals(value) != true))
                    {
                        this.mediumField = value;
                        this.OnPropertyChanged("Medium");
                    }
                }
                else
                {
                    this.mediumField = value;
                    this.OnPropertyChanged("Medium");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Workflow object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Workflow object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Workflow object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Workflow obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Workflow));
                obj = ((Workflow)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Workflow object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Workflow object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Workflow object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Workflow obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://workflowxcml.model")]
    public partial class WorkflowActivities : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Activity> activityItemField;

        public WorkflowActivities()
        {
            if ((this.activityItemField == null))
            {
                this.activityItemField = new List<Activity>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("activityItem")]
        public List<Activity> activityItem
        {
            get
            {
                return this.activityItemField;
            }
            set
            {
                if ((this.activityItemField != null))
                {
                    if ((activityItemField.Equals(value) != true))
                    {
                        this.activityItemField = value;
                        this.OnPropertyChanged("activityItem");
                    }
                }
                else
                {
                    this.activityItemField = value;
                    this.OnPropertyChanged("activityItem");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current WorkflowActivities object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an WorkflowActivities object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output WorkflowActivities object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out WorkflowActivities obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(WorkflowActivities));
                obj = ((WorkflowActivities)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current WorkflowActivities object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an WorkflowActivities object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output WorkflowActivities object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out WorkflowActivities obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Boundary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Decision))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Call))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    public abstract partial class Activity : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string activityIDField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string activityID
        {
            get
            {
                return this.activityIDField;
            }
            set
            {
                if ((this.activityIDField != null))
                {
                    if ((activityIDField.Equals(value) != true))
                    {
                        this.activityIDField = value;
                        this.OnPropertyChanged("activityID");
                    }
                }
                else
                {
                    this.activityIDField = value;
                    this.OnPropertyChanged("activityID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Activity object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Activity object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Activity object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Activity obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Activity));
                obj = ((Activity)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Activity object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Activity object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Activity object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Activity obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Medium : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Capability mediumDataTypeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string mediumNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string suggestedApplicationField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string voiceCommandField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toConnectionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toFormField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Capability mediumDataType
        {
            get
            {
                return this.mediumDataTypeField;
            }
            set
            {
                if ((this.mediumDataTypeField != null))
                {
                    if ((mediumDataTypeField.Equals(value) != true))
                    {
                        this.mediumDataTypeField = value;
                        this.OnPropertyChanged("mediumDataType");
                    }
                }
                else
                {
                    this.mediumDataTypeField = value;
                    this.OnPropertyChanged("mediumDataType");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string mediumName
        {
            get
            {
                return this.mediumNameField;
            }
            set
            {
                if ((this.mediumNameField != null))
                {
                    if ((mediumNameField.Equals(value) != true))
                    {
                        this.mediumNameField = value;
                        this.OnPropertyChanged("mediumName");
                    }
                }
                else
                {
                    this.mediumNameField = value;
                    this.OnPropertyChanged("mediumName");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string suggestedApplication
        {
            get
            {
                return this.suggestedApplicationField;
            }
            set
            {
                if ((this.suggestedApplicationField != null))
                {
                    if ((suggestedApplicationField.Equals(value) != true))
                    {
                        this.suggestedApplicationField = value;
                        this.OnPropertyChanged("suggestedApplication");
                    }
                }
                else
                {
                    this.suggestedApplicationField = value;
                    this.OnPropertyChanged("suggestedApplication");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string voiceCommand
        {
            get
            {
                return this.voiceCommandField;
            }
            set
            {
                if ((this.voiceCommandField != null))
                {
                    if ((voiceCommandField.Equals(value) != true))
                    {
                        this.voiceCommandField = value;
                        this.OnPropertyChanged("voiceCommand");
                    }
                }
                else
                {
                    this.voiceCommandField = value;
                    this.OnPropertyChanged("voiceCommand");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toConnection
        {
            get
            {
                return this.toConnectionField;
            }
            set
            {
                if ((this.toConnectionField != null))
                {
                    if ((toConnectionField.Equals(value) != true))
                    {
                        this.toConnectionField = value;
                        this.OnPropertyChanged("toConnection");
                    }
                }
                else
                {
                    this.toConnectionField = value;
                    this.OnPropertyChanged("toConnection");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toForm
        {
            get
            {
                return this.toFormField;
            }
            set
            {
                if ((this.toFormField != null))
                {
                    if ((toFormField.Equals(value) != true))
                    {
                        this.toFormField = value;
                        this.OnPropertyChanged("toForm");
                    }
                }
                else
                {
                    this.toFormField = value;
                    this.OnPropertyChanged("toForm");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Medium object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Medium object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Medium object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Medium obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Medium));
                obj = ((Medium)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Medium object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Medium object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Medium object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Medium obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    public enum Capability
    {

        /// <remarks/>
        TextFile,

        /// <remarks/>
        BinaryFile,

        /// <remarks/>
        StreamFile,

        /// <remarks/>
        NonStreamFile,

        /// <remarks/>
        AudioFile,

        /// <remarks/>
        VideoFile,

        /// <remarks/>
        AVFile,

        /// <remarks/>
        Text,

        /// <remarks/>
        LiveStream,

        /// <remarks/>
        LiveAudio,

        /// <remarks/>
        LiveVideo,

        /// <remarks/>
        LiveAV,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class IsAttached : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toDeviceField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fromPersonField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toDevice
        {
            get
            {
                return this.toDeviceField;
            }
            set
            {
                if ((this.toDeviceField != null))
                {
                    if ((toDeviceField.Equals(value) != true))
                    {
                        this.toDeviceField = value;
                        this.OnPropertyChanged("toDevice");
                    }
                }
                else
                {
                    this.toDeviceField = value;
                    this.OnPropertyChanged("toDevice");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string fromPerson
        {
            get
            {
                return this.fromPersonField;
            }
            set
            {
                if ((this.fromPersonField != null))
                {
                    if ((fromPersonField.Equals(value) != true))
                    {
                        this.fromPersonField = value;
                        this.OnPropertyChanged("fromPerson");
                    }
                }
                else
                {
                    this.fromPersonField = value;
                    this.OnPropertyChanged("fromPerson");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current IsAttached object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an IsAttached object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output IsAttached object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IsAttached obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(IsAttached));
                obj = ((IsAttached)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current IsAttached object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an IsAttached object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output IsAttached object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IsAttached obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Person : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string personIDField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string personNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string personRoleField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toIsAttachedField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string personID
        {
            get
            {
                return this.personIDField;
            }
            set
            {
                if ((this.personIDField != null))
                {
                    if ((personIDField.Equals(value) != true))
                    {
                        this.personIDField = value;
                        this.OnPropertyChanged("personID");
                    }
                }
                else
                {
                    this.personIDField = value;
                    this.OnPropertyChanged("personID");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string personName
        {
            get
            {
                return this.personNameField;
            }
            set
            {
                if ((this.personNameField != null))
                {
                    if ((personNameField.Equals(value) != true))
                    {
                        this.personNameField = value;
                        this.OnPropertyChanged("personName");
                    }
                }
                else
                {
                    this.personNameField = value;
                    this.OnPropertyChanged("personName");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string personRole
        {
            get
            {
                return this.personRoleField;
            }
            set
            {
                if ((this.personRoleField != null))
                {
                    if ((personRoleField.Equals(value) != true))
                    {
                        this.personRoleField = value;
                        this.OnPropertyChanged("personRole");
                    }
                }
                else
                {
                    this.personRoleField = value;
                    this.OnPropertyChanged("personRole");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toIsAttached
        {
            get
            {
                return this.toIsAttachedField;
            }
            set
            {
                if ((this.toIsAttachedField != null))
                {
                    if ((toIsAttachedField.Equals(value) != true))
                    {
                        this.toIsAttachedField = value;
                        this.OnPropertyChanged("toIsAttached");
                    }
                }
                else
                {
                    this.toIsAttachedField = value;
                    this.OnPropertyChanged("toIsAttached");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Person object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Person object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Person object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Person obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Person));
                obj = ((Person)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Person object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Person object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Person object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Person obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Device : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Capability> deviceCapabilityField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isLocalField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isLocalFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isVirtualField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool isVirtualFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> toConnectionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fromIsAttachedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string deviceIDField;

        public Device()
        {
            if ((this.toConnectionField == null))
            {
                this.toConnectionField = new List<string>();
            }
            if ((this.deviceCapabilityField == null))
            {
                this.deviceCapabilityField = new List<Capability>();
            }
        }

        /// <remarks/>
        // CODEGEN Warning: 'default' attribute on array-like elements is not supported in this version of the .Net Framework.  Ignoring default='TextFile' attribute on element name='deviceCapability'.
        [System.Xml.Serialization.XmlElementAttribute("deviceCapability")]
        public List<Capability> deviceCapability
        {
            get
            {
                return this.deviceCapabilityField;
            }
            set
            {
                if ((this.deviceCapabilityField != null))
                {
                    if ((deviceCapabilityField.Equals(value) != true))
                    {
                        this.deviceCapabilityField = value;
                        this.OnPropertyChanged("deviceCapability");
                    }
                }
                else
                {
                    this.deviceCapabilityField = value;
                    this.OnPropertyChanged("deviceCapability");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isLocal
        {
            get
            {
                return this.isLocalField;
            }
            set
            {
                if ((isLocalField.Equals(value) != true))
                {
                    this.isLocalField = value;
                    this.OnPropertyChanged("isLocal");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLocalSpecified
        {
            get
            {
                return this.isLocalFieldSpecified;
            }
            set
            {
                if ((isLocalFieldSpecified.Equals(value) != true))
                {
                    this.isLocalFieldSpecified = value;
                    this.OnPropertyChanged("isLocalSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isVirtual
        {
            get
            {
                return this.isVirtualField;
            }
            set
            {
                if ((isVirtualField.Equals(value) != true))
                {
                    this.isVirtualField = value;
                    this.OnPropertyChanged("isVirtual");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isVirtualSpecified
        {
            get
            {
                return this.isVirtualFieldSpecified;
            }
            set
            {
                if ((isVirtualFieldSpecified.Equals(value) != true))
                {
                    this.isVirtualFieldSpecified = value;
                    this.OnPropertyChanged("isVirtualSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public List<string> toConnection
        {
            get
            {
                return this.toConnectionField;
            }
            set
            {
                if ((this.toConnectionField != null))
                {
                    if ((toConnectionField.Equals(value) != true))
                    {
                        this.toConnectionField = value;
                        this.OnPropertyChanged("toConnection");
                    }
                }
                else
                {
                    this.toConnectionField = value;
                    this.OnPropertyChanged("toConnection");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public string fromIsAttached
        {
            get
            {
                return this.fromIsAttachedField;
            }
            set
            {
                if ((this.fromIsAttachedField != null))
                {
                    if ((fromIsAttachedField.Equals(value) != true))
                    {
                        this.fromIsAttachedField = value;
                        this.OnPropertyChanged("fromIsAttached");
                    }
                }
                else
                {
                    this.fromIsAttachedField = value;
                    this.OnPropertyChanged("fromIsAttached");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DeviceID
        {
            get
            {
                return this.deviceIDField;
            }
            set
            {
                if ((this.deviceIDField != null))
                {
                    if ((deviceIDField.Equals(value) != true))
                    {
                        this.deviceIDField = value;
                        this.OnPropertyChanged("DeviceID");
                    }
                }
                else
                {
                    this.deviceIDField = value;
                    this.OnPropertyChanged("DeviceID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Device object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Device object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Device object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Device obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Device));
                obj = ((Device)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Device object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Device object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Device object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Device obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Form : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string formDataTypeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Action actionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool actionFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string formNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string suggestedApplicationField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string voiceCommandField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toConnectionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toParentFormField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string formDataType
        {
            get
            {
                return this.formDataTypeField;
            }
            set
            {
                if ((this.formDataTypeField != null))
                {
                    if ((formDataTypeField.Equals(value) != true))
                    {
                        this.formDataTypeField = value;
                        this.OnPropertyChanged("formDataType");
                    }
                }
                else
                {
                    this.formDataTypeField = value;
                    this.OnPropertyChanged("formDataType");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Action action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                if ((this.actionField != null))
                {
                    if ((actionField.Equals(value) != true))
                    {
                        this.actionField = value;
                        this.OnPropertyChanged("action");
                    }
                }
                else
                {
                    this.actionField = value;
                    this.OnPropertyChanged("action");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actionSpecified
        {
            get
            {
                return this.actionFieldSpecified;
            }
            set
            {
                if ((actionFieldSpecified.Equals(value) != true))
                {
                    this.actionFieldSpecified = value;
                    this.OnPropertyChanged("actionSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string formName
        {
            get
            {
                return this.formNameField;
            }
            set
            {
                if ((this.formNameField != null))
                {
                    if ((formNameField.Equals(value) != true))
                    {
                        this.formNameField = value;
                        this.OnPropertyChanged("formName");
                    }
                }
                else
                {
                    this.formNameField = value;
                    this.OnPropertyChanged("formName");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string suggestedApplication
        {
            get
            {
                return this.suggestedApplicationField;
            }
            set
            {
                if ((this.suggestedApplicationField != null))
                {
                    if ((suggestedApplicationField.Equals(value) != true))
                    {
                        this.suggestedApplicationField = value;
                        this.OnPropertyChanged("suggestedApplication");
                    }
                }
                else
                {
                    this.suggestedApplicationField = value;
                    this.OnPropertyChanged("suggestedApplication");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string voiceCommand
        {
            get
            {
                return this.voiceCommandField;
            }
            set
            {
                if ((this.voiceCommandField != null))
                {
                    if ((voiceCommandField.Equals(value) != true))
                    {
                        this.voiceCommandField = value;
                        this.OnPropertyChanged("voiceCommand");
                    }
                }
                else
                {
                    this.voiceCommandField = value;
                    this.OnPropertyChanged("voiceCommand");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toConnection
        {
            get
            {
                return this.toConnectionField;
            }
            set
            {
                if ((this.toConnectionField != null))
                {
                    if ((toConnectionField.Equals(value) != true))
                    {
                        this.toConnectionField = value;
                        this.OnPropertyChanged("toConnection");
                    }
                }
                else
                {
                    this.toConnectionField = value;
                    this.OnPropertyChanged("toConnection");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string toParentForm
        {
            get
            {
                return this.toParentFormField;
            }
            set
            {
                if ((this.toParentFormField != null))
                {
                    if ((toParentFormField.Equals(value) != true))
                    {
                        this.toParentFormField = value;
                        this.OnPropertyChanged("toParentForm");
                    }
                }
                else
                {
                    this.toParentFormField = value;
                    this.OnPropertyChanged("toParentForm");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Form object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Form object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Form object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Form obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Form));
                obj = ((Form)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Form object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Form object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Form object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Form obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    public enum Action
    {

        /// <remarks/>
        send,

        /// <remarks/>
        doNotSend,

        /// <remarks/>
        start,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Connection : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string bandwidthField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> fromDeviceField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string connectionIDField;

        public Connection()
        {
            if ((this.fromDeviceField == null))
            {
                this.fromDeviceField = new List<string>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bandwidth
        {
            get
            {
                return this.bandwidthField;
            }
            set
            {
                if ((this.bandwidthField != null))
                {
                    if ((bandwidthField.Equals(value) != true))
                    {
                        this.bandwidthField = value;
                        this.OnPropertyChanged("bandwidth");
                    }
                }
                else
                {
                    this.bandwidthField = value;
                    this.OnPropertyChanged("bandwidth");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public List<string> fromDevice
        {
            get
            {
                return this.fromDeviceField;
            }
            set
            {
                if ((this.fromDeviceField != null))
                {
                    if ((fromDeviceField.Equals(value) != true))
                    {
                        this.fromDeviceField = value;
                        this.OnPropertyChanged("fromDevice");
                    }
                }
                else
                {
                    this.fromDeviceField = value;
                    this.OnPropertyChanged("fromDevice");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ConnectionID
        {
            get
            {
                return this.connectionIDField;
            }
            set
            {
                if ((this.connectionIDField != null))
                {
                    if ((connectionIDField.Equals(value) != true))
                    {
                        this.connectionIDField = value;
                        this.OnPropertyChanged("ConnectionID");
                    }
                }
                else
                {
                    this.connectionIDField = value;
                    this.OnPropertyChanged("ConnectionID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Connection object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Connection object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Connection object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Connection obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Connection));
                obj = ((Connection)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Connection object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Connection object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Connection object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Connection obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Boundary : Activity, System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private BoundaryType typeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool typeFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toActivityField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BoundaryType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                if ((this.typeField != null))
                {
                    if ((typeField.Equals(value) != true))
                    {
                        this.typeField = value;
                        this.OnPropertyChanged("Type");
                    }
                }
                else
                {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                if ((typeFieldSpecified.Equals(value) != true))
                {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ToActivity
        {
            get
            {
                return this.toActivityField;
            }
            set
            {
                if ((this.toActivityField != null))
                {
                    if ((toActivityField.Equals(value) != true))
                    {
                        this.toActivityField = value;
                        this.OnPropertyChanged("ToActivity");
                    }
                }
                else
                {
                    this.toActivityField = value;
                    this.OnPropertyChanged("ToActivity");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Boundary object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Boundary object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Boundary object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Boundary obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Boundary));
                obj = ((Boundary)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Boundary object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Boundary object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Boundary object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Boundary obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    public enum BoundaryType
    {

        /// <remarks/>
        Start,

        /// <remarks/>
        End,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Decision : Activity, System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Activity> itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sourceActivityIDField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string successPathIDField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string failPathIDField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string decisionToCallField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string decisionToBoundaryField;

        public Decision()
        {
            if ((this.itemsField == null))
            {
                this.itemsField = new List<Activity>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DecisionToBoundary", typeof(Boundary))]
        [System.Xml.Serialization.XmlElementAttribute("DecisionToCall", typeof(Call))]
        public List<Activity> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                if ((this.itemsField != null))
                {
                    if ((itemsField.Equals(value) != true))
                    {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else
                {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sourceActivityID
        {
            get
            {
                return this.sourceActivityIDField;
            }
            set
            {
                if ((this.sourceActivityIDField != null))
                {
                    if ((sourceActivityIDField.Equals(value) != true))
                    {
                        this.sourceActivityIDField = value;
                        this.OnPropertyChanged("sourceActivityID");
                    }
                }
                else
                {
                    this.sourceActivityIDField = value;
                    this.OnPropertyChanged("sourceActivityID");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string successPathID
        {
            get
            {
                return this.successPathIDField;
            }
            set
            {
                if ((this.successPathIDField != null))
                {
                    if ((successPathIDField.Equals(value) != true))
                    {
                        this.successPathIDField = value;
                        this.OnPropertyChanged("successPathID");
                    }
                }
                else
                {
                    this.successPathIDField = value;
                    this.OnPropertyChanged("successPathID");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string failPathID
        {
            get
            {
                return this.failPathIDField;
            }
            set
            {
                if ((this.failPathIDField != null))
                {
                    if ((failPathIDField.Equals(value) != true))
                    {
                        this.failPathIDField = value;
                        this.OnPropertyChanged("failPathID");
                    }
                }
                else
                {
                    this.failPathIDField = value;
                    this.OnPropertyChanged("failPathID");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DecisionToCall
        {
            get
            {
                return this.decisionToCallField;
            }
            set
            {
                if ((this.decisionToCallField != null))
                {
                    if ((decisionToCallField.Equals(value) != true))
                    {
                        this.decisionToCallField = value;
                        this.OnPropertyChanged("DecisionToCall");
                    }
                }
                else
                {
                    this.decisionToCallField = value;
                    this.OnPropertyChanged("DecisionToCall");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DecisionToBoundary
        {
            get
            {
                return this.decisionToBoundaryField;
            }
            set
            {
                if ((this.decisionToBoundaryField != null))
                {
                    if ((decisionToBoundaryField.Equals(value) != true))
                    {
                        this.decisionToBoundaryField = value;
                        this.OnPropertyChanged("DecisionToBoundary");
                    }
                }
                else
                {
                    this.decisionToBoundaryField = value;
                    this.OnPropertyChanged("DecisionToBoundary");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Decision object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Decision object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Decision object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Decision obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Decision));
                obj = ((Decision)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Decision object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Decision object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Decision object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Decision obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://workflowxcml.model")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://workflowxcml.model", IsNullable = false)]
    public partial class Call : Activity, System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool outcomeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool outcomeFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string callToConnectionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string callToDecisionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string callToBoundaryField;

        public Call()
        {
            if ((this.itemsField == null))
            {
                this.itemsField = new List<object>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CallToBoundary", typeof(Boundary))]
        [System.Xml.Serialization.XmlElementAttribute("CallToConnection", typeof(Connection))]
        [System.Xml.Serialization.XmlElementAttribute("CallToDecision", typeof(Decision))]
        public List<object> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                if ((this.itemsField != null))
                {
                    if ((itemsField.Equals(value) != true))
                    {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else
                {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Outcome
        {
            get
            {
                return this.outcomeField;
            }
            set
            {
                if ((outcomeField.Equals(value) != true))
                {
                    this.outcomeField = value;
                    this.OnPropertyChanged("Outcome");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OutcomeSpecified
        {
            get
            {
                return this.outcomeFieldSpecified;
            }
            set
            {
                if ((outcomeFieldSpecified.Equals(value) != true))
                {
                    this.outcomeFieldSpecified = value;
                    this.OnPropertyChanged("OutcomeSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CallToConnection
        {
            get
            {
                return this.callToConnectionField;
            }
            set
            {
                if ((this.callToConnectionField != null))
                {
                    if ((callToConnectionField.Equals(value) != true))
                    {
                        this.callToConnectionField = value;
                        this.OnPropertyChanged("CallToConnection");
                    }
                }
                else
                {
                    this.callToConnectionField = value;
                    this.OnPropertyChanged("CallToConnection");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CallToDecision
        {
            get
            {
                return this.callToDecisionField;
            }
            set
            {
                if ((this.callToDecisionField != null))
                {
                    if ((callToDecisionField.Equals(value) != true))
                    {
                        this.callToDecisionField = value;
                        this.OnPropertyChanged("CallToDecision");
                    }
                }
                else
                {
                    this.callToDecisionField = value;
                    this.OnPropertyChanged("CallToDecision");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CallToBoundary
        {
            get
            {
                return this.callToBoundaryField;
            }
            set
            {
                if ((this.callToBoundaryField != null))
                {
                    if ((callToBoundaryField.Equals(value) != true))
                    {
                        this.callToBoundaryField = value;
                        this.OnPropertyChanged("CallToBoundary");
                    }
                }
                else
                {
                    this.callToBoundaryField = value;
                    this.OnPropertyChanged("CallToBoundary");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Call object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Call object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Call object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Call obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Call));
                obj = ((Call)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Call object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Call object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Call object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Call obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
    }
}
